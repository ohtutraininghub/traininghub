// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

enum Role {
  ADMIN
  TRAINEE
  TRAINER
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  countryId        String?
  country          Country?   @relation(name: "country", fields: [countryId], references: [id])
  titleId          String?
  title            Title?     @relation(name: "title", fields: [titleId], references: [id])
  image            String?
  courses          Course[]
  createdCourses   Course[]   @relation(name: "createdCourses")
  createdTemplates Template[] @relation(name: "createdTemplates")
  requestedCourses Course[]   @relation(name: "requestedCourses")
  accounts         Account[]
  sessions         Session[]
  role             Role       @default(TRAINEE)
  calendar         Calendar[]
  profileCompleted Boolean    @default(false)
}

model Country {
  id          String @id @default(cuid())
  name        String
  countryCode String
  users       User[] @relation(name: "country")
}

model Title {
  id    String @id @default(cuid())
  name  String
  users User[] @relation(name: "title")
}

model Course {
  id             String     @id @default(cuid())
  name           String
  description    String
  summary        String?
  startDate      DateTime
  endDate        DateTime
  lastEnrollDate DateTime?
  lastCancelDate DateTime?
  maxStudents    Int
  students       User[]
  requesters     User[]     @relation(name: "requestedCourses")
  tags           Tag[]
  createdBy      User?      @relation(name: "createdCourses", references: [id], fields: [createdById])
  createdById    String
  calendar       Calendar[]
  image          String?
  slackChannelId String?
}

model Template {
  id          String  @id @default(cuid())
  name        String
  description String
  summary     String?
  maxStudents Int
  tags        Tag[]
  createdBy   User?   @relation(name: "createdTemplates", references: [id], fields: [createdById])
  createdById String
  image       String?
}

model Calendar {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  googleEventId String

  @@unique([userId, courseId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique @db.Citext
  courses   Course[]
  templates Template[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
